AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Application Load Balancer and related resources'

Parameters:
  EnvironmentName:
    Description: Environment name (e.g., dev, staging, prod)
    Type: String
    Default: dev
  VpcId:
    Description: ID of the VPC
    Type: AWS::EC2::VPC::Id
  PublicSubnet1Id:
    Description: ID of the first public subnet
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2Id:
    Description: ID of the second public subnet
    Type: AWS::EC2::Subnet::Id
  CertificateArn:
    Description: ARN of the ACM certificate for HTTPS (optional)
    Type: String
    Default: ""

Resources:
  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
      Subnets: 
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId

  # HTTP Listener (redirects to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Additional listener for port 8080 that redirects to HTTPS
  HTTP8080Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP

  # HTTPS Listener
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: 'text/plain'
            MessageBody: 'No default action configured'
            StatusCode: '200'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  # Target Group for ECS Service
  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-ecs-tg
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200-399'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  # Listener Rule for the target group
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !If [HasCertificate, !Ref HTTPSListener, !Ref HTTPListener]
      Priority: 1

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Outputs:
  ALBName:
    Description: The name of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${EnvironmentName}-alb-name
  ALBDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-alb-dns-name
  ALBFullName:
    Description: The full name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub ${EnvironmentName}-alb-full-name
  ALBSecurityGroupId:
    Description: The security group ID of the load balancer
    Value: !GetAtt ALBSecurityGroup.GroupId
    Export:
      Name: !Sub ${EnvironmentName}-alb-sg-id
  TargetGroupArn:
    Description: The ARN of the target group
    Value: !Ref ECSTargetGroup
    Export:
      Name: !Sub ${EnvironmentName}-tg-arn
